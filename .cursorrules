# Cursor Rules for Customify Shopify App

## Environment Variables Status
- All Vercel environment variables are properly configured
- SHOPIFY_ACCESS_TOKEN is set in Vercel Dashboard
- Do NOT ask about environment variables configuration
- Do NOT ask about Vercel Dashboard settings
- Do NOT ask about token values or setup
- SHOPIFY_ACCESS_TOKEN is available in environment variables - use it directly

## CRITICAL: Product Page Layout Proportions
- **NEVER CHANGE** the product page layout proportions (35% image / 65% app) without explicit user command
- These proportions are CRITICAL for the product page layout
- Always preserve the existing grid layout: `grid-template-columns: 35% 65%`
- This rule is MANDATORY and must be followed in ALL cases

## CRITICAL SECURITY RULE - NEVER COMMIT SECRETS
- **NEVER** add passwords, tokens, API keys, or any secrets to files that will be committed to GitHub
- **ALWAYS** use environment variables for sensitive data (process.env.VARIABLE_NAME)
- **ALWAYS** use placeholder text like "your_token_here" or "shpat_..." in code examples
- **NEVER** hardcode real tokens, passwords, or API keys in any file
- If a file contains secrets, it must be added to .gitignore or use environment variables
- This rule is CRITICAL and must be followed in ALL cases

## Current Project Status
- Shopify app is installed and working in customify-ok.myshopify.com
- OAuth flow is complete
- App has proper permissions in Shopify
- Vercel deployment is functional
- Vercel environment variables updated to new store
- Old store (customiffyy.myshopify.com) was preview only - DO NOT suggest using it

## Shopify Connection & Permissions
- **Store**: customify-ok.myshopify.com (redirects to lumly.pl)
- **App Permissions**: read_products, write_products, read_orders, write_orders, read_customers, read_content, read_themes, write_themes, read_script_tags
- **Access Token**: Available in Vercel environment variables (SHOPIFY_ACCESS_TOKEN)
- **Theme Management**: Can edit theme files via `/api/update-theme-simple` endpoint
- **Current Theme**: "Horizon" (ID: 186692927813)
- **What We Can Edit**: 
  - Theme files (layout/theme.liquid, sections, snippets, assets)
  - Product data and variants
  - Order management
  - Customer data
  - Script tags for theme integration

## Debugging Focus
- Focus on code issues, not environment setup
- Check function logic and implementation
- Look for runtime errors or logic problems
- Verify API calls and responses

## Key Files
- api/status.js - App status checker
- api/test.js - Environment variables test
- api/install.js - OAuth installation
- api/products.js - Product creation and cart management
- api/hide-product.js - Product hiding functionality
- api/transform.js - AI image transformation
- public/shopify-embed.html - Main UI and cart integration
- public/shopify-script.js - Shopify theme integration
- vercel.json - Vercel configuration

## Theme Files Location
- **MAIN THEME FILE**: `customify-theme/layout/theme.liquid` - główny plik motywu Shopify
- **BACKUP THEME FILE**: `theme.liquid` - kopia motywu w głównym katalogu
- **THEME DEPLOYMENT**: Używamy endpointu `/api/update-theme-simple` do wdrażania zmian

## Theme Editing Workflow
1. **Edit**: Modify `customify-theme/layout/theme.liquid` (main file)
2. **Deploy**: Use Node.js script to upload via `/api/update-theme-simple`
3. **Test**: Check changes on lumly.pl/products/custom
4. **Backup**: Keep `theme.liquid` as backup copy
- **IMPORTANT**: Always edit the main theme file, not the backup
- **DEPLOYMENT**: Use our app's API endpoint (has write_themes permission)
- **NO GIT PUSH**: Theme changes go directly to Shopify, not GitHub

## Project Goal
Customify is a Shopify app that allows customers to:
1. Upload their own photos on product pages
2. Use AI (Replicate API) to transform/modify the photos with various styles
3. Preview the AI-modified image
4. Add the customized product to cart for printing
5. Pay for the physical printed version

## Product Customization Logic
- **Original product** = only template/example image
- **Final product** = user's photo transformed by AI in selected style
- **Price depends on size** (small, medium, large, xlarge)
- **User pays for physical print** of their AI-transformed photo
- **Process**: Upload → Select style → Select size → AI transform → Create new product → Add to cart
- **For store**: Order contains AI image for printing + original user photo + style/size info

## Product Visibility Management
- **Products are created as HIDDEN** (published: false) to prevent catalog clutter
- **Products are hidden immediately** after adding to cart via `/api/hide-product` endpoint
- **Hidden products** are not visible in store catalog but remain accessible for order fulfillment
- **API Endpoint**: `/api/hide-product` - hides products by setting published: false
- **Automatic hiding**: Called from `addToCart()` function after successful cart addition
- **Purpose**: Keep catalog clean while preserving order data and AI-generated images

## Product Identification Strategy
- **Main Product**: "Obraz ze zdjęcia w stylu Ghibli" (URL: /products/custom) - ALWAYS VISIBLE
- **New Customify Products**: Contain word "rozmiar" in title (e.g., "Styl pixar - Rozmiar medium")
- **CSS Selectors for Hiding**:
  ```css
  /* Hide ONLY new Customify products (containing "rozmiar") */
  .product-card:has([data-product-title*="rozmiar"]) {
    display: none !important;
  }
  
  /* PROTECTION: Main product NEVER hidden */
  .product-card:has([data-product-title*="Obraz ze zdjęcia w stylu Ghibli"]) {
    display: block !important;
  }
  ```
- **Why "rozmiar" works**: New products always have size in title, main product doesn't
- **Alternative selectors**: `[href*="spersonalizowany"]` for URL-based hiding

## Communication Rules
- If you have doubts about requirements, ASK QUESTIONS before implementing
- Always clarify the exact business logic before writing code
- Focus on understanding the complete user journey before coding
- User explicitly stated: NO MORE PASSWORD SUGGESTIONS - user doesn't want password solutions, stop proposing password-related fixes
- User confirmed: NO UPGRADE OPTION in Billing - don't ask about upgrade options anymore
- User explicitly stated: NO CREATING NEW PRODUCTS - don't propose creating new products anymore, use existing product with properties

## Common Issues to Check
- Function syntax and exports
- API endpoint routing
- Error handling in functions
- Response formatting
- CORS configuration

## Recent Fixes (December 2024)
### Cart Add Functionality Fix
- **Problem**: `net::ERR_FAILED` and `TypeError: Failed to fetch` when adding products to cart
- **Root Cause**: ID mismatch between created product and cart add request + CORS issues with fetch()
- **Solution**: 
  - Added detailed logging in `api/products.js` to debug Shopify API responses
  - Changed cart add method from `fetch()` to `window.location.href` to avoid CORS
  - Added `productId` to API response for better debugging
  - Simplified cart add process to prevent network errors
- **Files Modified**: `api/products.js`, `public/shopify-embed.html`
- **Status**: ✅ Fixed and deployed

### Product Visibility Issue Fix
- **Problem**: Główny produkt "custom" nie był widoczny w katalogu mimo że był w HTML
- **Root Cause**: Style CSS w `customify.css` ukrywały produkty:
  ```css
  .product-card:has([href*="custom"]) {
    display: none !important;
  }
  ```
- **Why it was hard to find**: 
  - Produkty były w HTML (curl pokazywał je)
  - JavaScript nie ukrywał (usunęliśmy funkcje JS)
  - Problem był w CSS - `display: none !important` ukrywał wizualnie
  - Selektor `[href*="custom"]` łapał główny produkt z URL `/products/custom`
- **Solution**: Usunięto wszystkie style CSS ukrywające produkty
- **Files Modified**: `shopify-theme/customify-theme/assets/customify.css`
- **Status**: ✅ Fixed and deployed

### Cart Integration Details
- **Method**: Direct navigation to cart URL instead of fetch requests
- **URL Format**: `https://{shop}/cart/add?id={variantId}&quantity=1&properties[...]`
- **Properties**: Original Image, AI Style, Original Product, Customization Type
- **Variant ID**: Use `product.variants[0].id` from Shopify API response
- **Product ID**: Use `product.id` for reference (not for cart add)

### Debugging Tips
- Check browser console for detailed logs with `[PRODUCTS.JS]` and `[SHOPIFY-EMBED.HTML]` prefixes
- Verify variant ID vs product ID usage
- Monitor network tab for failed requests
- Use direct navigation instead of fetch for cart operations

### Deployment Process
- **ALWAYS push changes to GitHub after fixes**
- Use `git add . && git commit -m "description" && git push origin main`
- Vercel automatically deploys from GitHub
- Test changes on live site after deployment
- Update cursor rules with new fixes and learnings

## CRITICAL: Code Duplication Management - NIE NISZCZ DZIAŁAJĄCYCH FUNKCJI
- **MAIN FILE**: `shopify-theme/customify-theme/layout/theme.liquid` - główny plik Shopify (PRIORYTET)
- **BACKUP FILES**: 
  - `theme.liquid` - kopia w głównym katalogu (backup)
  - `shopify-theme-complete.liquid` - kopia kompletna (archive)
  - `public/shopify-script.js` - JavaScript injection (tylko JS, nie HTML)
- **SYNC RULE**: Po każdej zmianie w głównym pliku, zaktualizuj wszystkie kopie
- **DEPLOYMENT**: Używaj tylko głównego pliku, kopie są backupami
- **STYLE IMAGES**: Używaj obrazków z katalogu public (screenshoty)
- **NO GRADIENTS**: Tylko obrazki, nie gradienty CSS
- **STYLE PRICING**: Style NIE wpływają na cenę - tylko rozmiary wpływają na cenę
- **PRIORITY**: NIE NISZCZ DZIAŁAJĄCYCH FUNKCJI - zachowaj wszystko co działa
